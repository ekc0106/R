---
title: "탐색적 자료분석 hw1"
author: "Kyucheol Eom"
date: "2018년 3일 28"
output:
  word_document: default
  html_document: default
  pdf_document: default
---
# **R-Object**
1.다음 데이터를 벡터 x에 다음 숫자열이 입력되어있다.
17  16  20  24  22  15  21  18
1) 벡터 x의 값중 20 이상인 것만 출력하라.
```{r}
x <- c(17,16,20,24,22,15,21,18)
x[x>=20]
```
2)벡터 x의 값 중 20 이상인 숫자를 100으로 바꾸어 y로 저장하여라.
```{r}
x[x>=20] <- 100
(y <- x)
```
2.아래는 입력하고자 하는 행렬값이다.
1)다음 행렬을 x로 저장하여라.
```{r}
x <- diag(4:8)
(x <- x-1)
```
2) 5열을 제거한 부분행렬을 y로 저장하여라.
```{r}
(y <- x[,-5])
```
3) y 행렬의 행과 열의 수를 yinfo 벡터로 저장하여라.
```{r}
(yinfo <- c(nrow(y),ncol(y)))
```
4) y 행렬에서 -1에 해당하는 숫자를 0으로 바꾼 후 y1 행렬로 저장하여라.
```{r}
y[y==-1] <- 0
(y1 <- y)
```
3.rowdata.txt파일이 c:\tmp폴더에 저장되어 있다. 파일 데이터의 1-5줄은 다음과 같다.
파일데이터는 총101줄이며, 첫 행은 데이터의 이름이다. 데이터에는 결측치가 포함되어있고 결측치는 r 작업공간으로 데이터를 불렀을 때 NA로 표시된다. 이 때, 변수 v2와 v3가 결측치가 아닌 데이터만 모아서 데이터 프레임으로 저장하고자 한다.
1)다음 파일을 데이터 프레임 rdata로 저장하는 코드를 작성하여라.
```{r}
(rdata <- read.csv('c:/tmp/rowdata.txt',header = T))
class(rdata)
#주어주신 5줄의 코드로 파일을 만들어서 작성했습니다.
```
2)NA를 확인할 수 있는 함수를 적어라.
```{r}
is.na.data.frame(rdata)
#위의 결과는 결측치인 부분을 TRUE 나타내는 함수이다. 아래는 몇행 몇열에 위치하는지 알려주는 함수이다.
na_value <- which(is.na.data.frame(rdata))
na_row <- na_value%/%nrow(rdata)+1
na_col <- na_value%%ncol(rdata)
for (i in 1:length(na_value)){
  cat(na_row[i],'행',na_col[i],'열','\t')
}
```
3)변수 v2와 v3가 동시에 NA가 아닌 행의 위치를 표시하는 코드를 적어라.
```{r}
(Q3_3 <- which((!is.na(rdata[,2])) &(!is.na(rdata[,3]))))
#즉, 2행과 4행이 변수 v2와 v3가 동시에 NA가 아닌 행이다.
```
4)변수 v2와 v3가 결측치가 아닌 데이터만 모아서 데이터 프레임 rdata1으로 저장하여라.
```{r}
(rdata1 <- rdata[Q3_3,])
```
4.길이가 7인 리스트를 작성하고자 한다. 리스트의 첫 번째 위치에는 논리값을 가지는 벡터(TRUE,FALSE)를 저장하고, 두 번째 위치에는 대각원소가 1인 2행 2열 대각행렬을, 세번째 위치에는 길이가 0부터 1까지 길이가 100이며 숫자들의 간격이 동일한 벡터를 입력하고자 한다. 네 번째부터 7번째 까지는 1부터 4까지 숫자를 입력한다.

1)이름이 temp인 리스트를 만드는 코드를 작성하라.
```{r}
temp <- list(a=c(T,F),b=diag(c(1,1)),c=seq(0,1,length=100),d=1:4,e=1:4,f=1:4,g=1:4)
```
2)temp 리스트의 두번째 원소를 제거하라.
```{r}
temp <- temp[-2]
```
3) 2)의 결과 temp 리스트의 3번째 위치하는 결과값은 무없인가
```{r}
temp[[3]]
```
4) 2)의 결과 temp 리스트의 길이를 확인하는 코드를 작성하여라.
```{r}
length(temp)
```
5. 다음은 벡터의 연산이다. 벡터의 결과를 적고 설명하여라.
```{r}
# 1)
a1 <- -1:2 ; a2 <- 1:2
a1+a2
#a1은 길이가 4, a2는 길이가 2인 벡터이다. r에서 벡터의 사칙연산은 벡터 원소간에 적용되며 재사용 규칙을 따르기에, -1+1=0, 0+2=2,1+1=2,2+2=4가 출력됨을 알수있다.

# 2)
a1 <- -(1:2) ; a2 <- 1:2
a1+a2 
# x1:x2의 전체에 괄호가 묶인체 -가 포함되어있기에 a1은 (-1,-2)인 벡터이다. a1과 a2가 더해지면 벡터원소간 의 사칙연산에 의해 (0,0)이 된다

# 3)
a1 <- matrix(0,2,2) ; a2 <- c(3,4)
a1+a2
#행렬은 세로방향으로 읽히므로, 이 역시 재사용 규칙에 따라 0+3,0+4,0+3,0+4 로 계산이 된 것이 2*2행렬에 세로방향으로 입력되어진다. 

# 4)
a1 <- matrix(1:4,2,2)
a1[a1>2] = 0
#행렬에서 2보다 큰 원소는 0으로 치환하라는 연산으로, 그 결과 a1행렬의 3,4가 0으로 된다. 결과는 아래와 같다.
a1

# 5)
a1 <- 1:5
a1[-1]-a1[-length(a1)]
#a1[-1]은 a1의 첫번째원소를 뺀 벡터이므로, (2,3,4,5)이다. a1[-legnth(a1)]은 a1의 길이 5 즉, a1[-5]의 의미를 갖고 그 벡터는 (1,2,3,4)이다. 그리고 나서 벡터간의 연산을 하면 (1,1,1,1)이 출력된다.
```

# **R-Programming**
1.수열 $a_{n+2}=0.9a_{n+1}-0.1a_{n}+1 (a_{1}=1,a_{2}=3)$일 때 $a_{20}$을 구하고자 한다. R 코드를 작성하여라.
```{r}
a1 <- 1 ; a2 <- 3
for (n in 3:20){
  a <- 0.9*a2-0.1*a1+1
  a1 <- a2 ; a2 <- a
}
a
```
2. 1번 문제에서 처음으로 $a_{n}$이 4보다 커지는 n을 구하는 코드를 작성하라.
```{r}
a1 <- 1 ; a2 <- 3
for (n in 3:20){
  a <- 0.9*a2-0.1*a1+1
  a1 <- a2 ; a2 <- a
  if (a>4) break
}
print(n)
```
3. A <- matrix(runif(100),50,5)를 실행하면 50행 5열 매트릭스가 생성된다. 각 행의 합을 벡터 v로 저장하는 반복문을 작성하여라.
```{r}
A <- matrix(runif(100),50,5)
v <- numeric(nrow(A))
for (i in 1:nrow(A)){
  v[i] <- sum(A[i,])
}
v
```
4. 다음 R 코드의 실행결과(tmp의 값)을 적어라.
```{r}
tmp <- rep(0,10)
a <- 10:1 ; idx <- 1
for (j in a){
  if(j<5){
    tmp[idx] <- a[j]
    idx <- idx+1
  }
}
tmp
```
5. x는 행이 1000, 열이 5인 행렬이며, 각 행은 관측치 하나를 의미한다. 예를 들어 첫 번째 관측치는 5차원 데이터이며 그 값을 R에서 코드 print(x[1,])으로 확인할 수 있다. 우리는 각 관측치에 1부터 10까지의 숫자를 랜덤하게 할당하고자 한다. 할당 결과를 sid라 저장하고자 한다면 R코드를 어떻게 써야하는가?
```{r}
set.seed(1)
x <- matrix(0,1000,5)
for (i in 1:nrow(x)){
  x[i,] <- sample(1:100,5)
}
sid <- sample(1:10,nrow(x),replace = T)
head(sid,50)
```
6.  ‘문제 5번’의 결과 각 관측치는 sid 벡터를 통해 1~10사이의 숫자를 할당받게 된다. 특정한 데이터가 어떤 번호를 할당 받았는지는 sid를 통해 알 수 있다. 예를 들어 sid[1]의 값을확인해보면 첫 번째 데이터가 어떤 번호를 할당 받았는지 알 수 있다. m.mat 은 10행 5열행렬이다. m.mat[j,]는 1에서 10사이 숫자중에서 j 값을 할당받은 데이터들의 평균벡터를 저장하고자 한다. 예를 들어 m.mat[1,] 은 sid 값이 1인 데이터들의 평균 벡터가 저장되어 있다. R 코드를 작성하여라.
```{r}
m.mat <- matrix(0,10,5)
for ( i in 1:nrow(m.mat)){
  m.mat[i,] <- apply(x[which(sid==i),],2,mean)
}
m.mat
```
6. '문제 6번'의 결과는 sid를 통해 할당 받은 번호에 해당하는 데이터 셋들의 평균을 나타내준다. 새로운 1000행 10열짜리 행렬 idist는 특정 관측치와 어떤 데이터 셋의 평균과 거리를 저장하는 행렬이다. 예를 들어 idist[1,1]의 값은 1번 데이터 (x[1,])와 1번 그룹의 평균 (m.mat[1,])의 거리가 입력된다. 여기서 5차원 상의 두 점을 $x_{i}=(x_{i1},...,x_{i5}),\; y_{i}=(y_{i1},...,y_{i5})$ 거리를 ${<x_{i},y_{i}>}\over{||x_{i}||*||y_{i}||}$라고  한다면, idist를 구하는 R코드를 작성하여라.
단, ${<x_{i},y_{i}>}=\sum^5_{j=1}x_{ij}y_{ij},\;||x_{i}||=\sqrt{<x_i,x_i>} $
```{r}
idist <- matrix(0,1000,10)
for(i in 1:1000){
  for(j in 1:10){
    idist[i,j] <- sum(x[i,]*m.mat[j,])/(sum(x[i,]^2)*sum(m.mat[j,]^2))
  }
}
str(idist)
```
7. '문제 6번'의 결과를 통해 각 데이터와 각 그룹의 중심간의 거리들을 알 수 있다. 각 데이터가 어떤 그룹과 거리가 가장 짧은지 표시한 벡터를 ivec이라고 하면 이를 계산하는 R코드를 작성하여라.
```{r}
ivec <- numeric(1000)
for(i in 1:1000){
  ivec[i] <- which(idist[i,]==min(idist[i,]))
}
head(ivec)
```
8. 아래 코드를 실행하면 리스트 형태의 데이터 a를 얻게 된다.
10명의 게이머가 1000번의 게임에 참가하여 등수를 매겼다. 각 게임의 결과는 a에 저장되
어 있다. 예를 들어 a[[1]] 은 4 6 8 2 9 인 벡터이며, 첫 번째 게임에 2,4,6,8,9 선수 5명이출전하였고, 4가 1등 6이 2등 8이 3등 2가 4등 9가 5등을 했다는 결과를 나타낸다. 즉, a[[k]] 는 k번째 게임에서 결과를 순위대로 선수의 번호로 나열한 데이터다. 한편, 각 선수들은 아래의 규칙대로 점수를 얻게 된다. 
```{r}
set.seed(1)
a <- list()
for (i in 1:1000){
  x <- rpois(1,4) +1
  x <- min(x,10)
  a[[i]] <- sample(1:10,x)
}
head(a)
```
1) 경기에 출전한 사람 수에 대한 빈도 테이블을 구하여라.
```{r}
num_game <- numeric(1000)
for(i in 1:1000){
  num_game[i] <- length(a[[i]])
}
table(num_game)
```
2)위 경기에서 1등은 누구인가?(동점자가 있는 경우 모두 적어라)
```{r}
score <- numeric(10)
for (i in 1:length(num_game)){
  if (num_game[i]<=3){
    j <- a[[i]][1]
    score[j] <- score[j]+1
  }
  if (num_game[i]>=4 & num_game[i]<=6){
    j <- a[[i]][1] ; k <- a[[i]][2]
    score[j] <- score[j]+2
    score[k] <- score[k]+1
  }
  if (num_game[i]>=7 & num_game[i]<=10){
    j <- a[[i]][1] ; k <- a[[i]][2] ; l <- a[[i]][3]
    score[j] <- score[j]+3
    score[k] <- score[k]+2
    score[l] <- score[l]+1
  }
}
score
which(score==max(score))
```
9. 아래와 같이 데이터를 준비한다.
현재 A군은 m1원의 돈을 가지고 있고, B양은 m2원의 돈을 가지고 있다. R을 이용해서 0
또는 1을 생성할 수 있는데 0이 나오면 A군은 B양에게 1원을 주고 1이 나오면 B양이 A군
에게 1원을 준다. 단, rbinom(1, 1, 1/2) 이라는 함수를 이용해서 0 혹은 1을 생성한다. 어떤 사람의 돈이 0이 되는 순간 게임은 끝나고 그 사람이 게임에서 진다고 하자.
1)이 실험을 4번 반복했을 때 A 군은 얼마를 가지고 있나?
```{r}
set.seed(1)
m1 <- 10 ; m2 <- 5 ; num <- 0
while(num<4){
  if (rbinom(1,1,1/2)==0){
    m1 <- m1-1 ; m2 <- m2+1
  }else{
    m1 <- m1+1 ; m2 <- m2-1
  }
  num <- num+1
}
m1
```
2)누가 몇 번만에 게임에서 이기게 되는가?
```{r}
set.seed(1)
m1 <- 10 ; m2 <- 5 ; num <- 0
while(m1!=0 & m2!=0){
  if (rbinom(1,1,1/2)==0){
    m1 <- m1-1 ; m2 <- m2+1
  }else{
    m1 <- m1+1 ; m2 <- m2-1
  }
  num <- num+1
}
cat(ifelse(m1==15,'A군','B양'),'이',num,'번만에 게임에서 이긴다')
```
3)m1=10이고 m2=5일때, 아래 코드를 이용해서 200번의 가상실험을 반복한다. 이 실험에서 A군은 200번의 실험중 몇 번의 실험에서 이기는가?
```{r}
A <- 0
for (k in 1:200){
  set.seed(k)
  m1 <- 10 ; m2 <- 5 ; num <- 0
  while(m1!=0 & m2!=0){
    if (rbinom(1,1,1/2)==0){
      m1 <- m1-1 ; m2 <- m2+1
    }else{
      m1 <- m1+1 ; m2 <- m2-1
    }
  }
  if (m2==0) A <- A+1
}
A
```
10. B양이 돈을 10원 15원 20원, 25원을 가졌을 때, A군이 이긴 비율을 구하여라.
```{r}
A <- numeric(4)
mm2 <- c(10,15,20,25)
for (j in 1:4){
  for (k in 1:200){
    set.seed(k)
    m1 <- 10 ; m2 <- mm2[j]
    while(m1!=0 & m2!=0){
      if (rbinom(1,1,1/2)==0){
        m1 <- m1-1 ; m2 <- m2+1
      }else{
        m1 <- m1+1 ; m2 <- m2-1
      }
    }
    if (m2==0) A[j] <- A[j]+1
  }
}
A/200
```